package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
)

func main() {
	fmt.Println("üõ†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Go-–∫–æ–¥–∞")
	fmt.Println("====================================")
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	fmt.Printf("–¢–µ–∫—É—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s/%s\n", runtime.GOOS, runtime.GOARCH)
	fmt.Println()
	
	// –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
	examples := []string{"hello", "calculator", "webapp"}
	
	for _, example := range examples {
		fmt.Printf("–ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: %s\n", example)
		fmt.Println(strings.Repeat("-", 40))
		
		// –ö–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
		compileExample(example, "", "")
		
		// –ö—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
		if runtime.GOOS != "linux" {
			compileExample(example, "linux", "amd64")
		}
		
		if runtime.GOOS != "windows" {
			compileExample(example, "windows", "amd64")
		}
		
		fmt.Println()
	}
	
	fmt.Println("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã!")
	fmt.Println("–ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'bin/'")
}

func compileExample(example, goos, goarch string) {
	examplePath := filepath.Join("examples", example)
	outputName := example
	
	if goos != "" && goarch != "" {
		outputName = fmt.Sprintf("%s_%s_%s", example, goos, goarch)
		if goos == "windows" {
			outputName += ".exe"
		}
	}
	
	outputPath := filepath.Join("bin", outputName)
	
	cmd := exec.Command("go", "build", "-o", outputPath, examplePath)
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏–∏
	if goos != "" && goarch != "" {
		cmd.Env = append(os.Environ(), 
			fmt.Sprintf("GOOS=%s", goos), 
			fmt.Sprintf("GOARCH=%s", goarch))
	}
	
	fmt.Printf("–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º: %s ", examplePath)
	if goos != "" && goarch != "" {
		fmt.Printf("–¥–ª—è %s/%s ", goos, goarch)
	}
	
	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %s\n", err)
		if len(output) > 0 {
			fmt.Printf("–í—ã–≤–æ–¥ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞: %s\n", string(output))
		}
	} else {
		fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ ‚Üí %s\n", outputPath)
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ
		if goos == "" || goos == runtime.GOOS {
			info, _ := os.Stat(outputPath)
			if info != nil {
				fmt.Printf("   –†–∞–∑–º–µ—Ä: %.2f KB\n", float64(info.Size())/1024)
			}
		}
	}
}
package main

import (
	"os"
	"path/filepath"
)

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
func createExamples() error {
	// –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Hello World
	helloCode := `package main

import "fmt"

func main() {
	fmt.Println("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üöÄ")
	fmt.Println("–≠—Ç–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ Go-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
}
`
	
	// –ü—Ä–∏–º–µ—Ä 2: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
	calculatorCode := `package main

import (
	"fmt"
	"os"
	"strconv"
)

func main() {
	if len(os.Args) != 4 {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: calculator <—á–∏—Å–ª–æ> <–æ–ø–µ—Ä–∞—Ç–æ—Ä> <—á–∏—Å–ª–æ>")
		fmt.Println("–û–ø–µ—Ä–∞—Ç–æ—Ä—ã: +, -, *, /")
		return
	}
	
	a, err1 := strconv.ParseFloat(os.Args[1], 64)
	op := os.Args[2]
	b, err2 := strconv.ParseFloat(os.Args[3], 64)
	
	if err1 != nil || err2 != nil {
		fmt.Println("–û—à–∏–±–∫–∞: –æ–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
		return
	}
	
	var result float64
	switch op {
	case "+":
		result = a + b
	case "-":
		result = a - b
	case "*":
		result = a * b
	case "/":
		if b == 0 {
			fmt.Println("–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
			return
		}
		result = a / b
	default:
		fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä")
		return
	}
	
	fmt.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %.2f %s %.2f = %.2f\n", a, op, b, result)
}
`
	
	// –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–æ—Å—Ç–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	webappCode := `package main

import (
	"fmt"
	"net/http"
)

func main() {
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "<h1>–ü—Ä–∏–≤–µ—Ç –æ—Ç Go-–≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞!</h1>")
		fmt.Fprintf(w, "<p>–≠—Ç–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>")
	})
	
	fmt.Println("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8080")
	http.ListenAndServe(":8080", nil)
}
`
	
	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
	examples := map[string]string{
		"hello":      helloCode,
		"calculator": calculatorCode,
		"webapp":     webappCode,
	}
	
	for name, code := range examples {
		dirPath := filepath.Join("examples", name)
		os.MkdirAll(dirPath, 0755)
		
		filePath := filepath.Join(dirPath, "main.go")
		err := os.WriteFile(filePath, []byte(code), 0644)
		if err != nil {
			return err
		}
	}
	
	return nil
}

func init() {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	err := createExamples()
	if err != nil {
		panic(err)
	}
}